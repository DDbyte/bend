(you can check the version by running node -v in the command line).

dir structure:
├── index.js             // Entry point for the application
├── app.js               // App configuration
├── controllers          // Controllers to handle the business logic
│   └── blogs.js         // Handles blog-related actions
├── models               // Mongoose models
│   └── blog.js          // Blog model
├── package-lock.json
├── package.json
├── utils                // Utility functions
│   ├── config.js        // Configuration for environment variables
│   ├── logger.js        // Logging functionality
│   └── middleware.js     // Middleware functions

//utils/list_helper.js
const favoriteBlog = (blogs) => {
    if(blogs.length === 0) {
        return null
    }
    const fav = blogs.reduce((max, blog) => {
        return blog.likes > blog.max ? blog: max}, blogs[0])
    return{
        title: favorite.title,
        author: favorite.author,
        likes: favorite.likes,
    }
}
gen syntax-reduce():
array.reduce((accumulator, currentValue) => {
  // logic to update the accumulator
}, initialValue);
1.init val: max=blogs[0]
2.callback fct: checks f the current blog has more likes then the current maximum, if true returns the current as the new max.
**********
const mostBlogs = (blogs) => {
  if (blogs.length === 0) return null;
  //count blogs by author
  const autCount = blogs.reduce((count, blog) =>{
    count[blog.author] = (count[blog.author] || 0) +1
    return count
  }, {})
  reduce(callback, {})
  callback=(count, blog) => {count[blog.author] = (count[blog.author]) +1}, {}
  callback=(obj build as reduce iters, current element) => {author: 1, ...}
  
}
//assert id
code: assert(blog.id, 'blog does not have an id property')
assert(condition, message) throws an error if condition is false.
blog.id is evaluated:
If id exists and is truthy (e.g., not undefined, null, or empty), the assertion passes.
If id is missing or falsy, the test fails, and the message 'Blog does not have an id property' is displayed.
**************************************
code witout test_helper.js
//tests/blog_api.test.js
const { test, after, beforeEach } = require('node:test')
const assert = require('node:assert')
const mongoose = require('mongoose')
const supertest = require('supertest')
const app = require('../app')

const Blog = require('../models/blog')
const { text } = require('node:stream/consumers')

//supertest instance used to send http reqs to the app without starting the server
const api = supertest(app)

const initialBlogs = [
    {
      title: 'First Blog',
      author: 'John Doe',
      url: 'http://example.com/first',
      likes: 10,
    },
    {
      title: 'Second Blog',
      author: 'Jane Doe',
      url: 'http://example.com/second',
      likes: 20,
    },
    {
        title: 'Third Blog',
        author: 'Alex Doe',
        url: 'http://example.com/third',
        likes: 30,
      },
  ]
  
//initialize the database
beforeEach(async () => {    
    await Blog.deleteMany({});
    await Blog.insertMany(initialBlogs)
})//

//verify blogs are returned as JSON and correct count
test('blogs are returned as json and contain the correct amount', async () => {
    const response = await api
        .get('/api/blogs')
        .expect(200)
        .expect('Content-Type', /application\/json/)

    //assert to check the response length
    assert.strictEqual(response.body.length, initialBlogs.length, 'Incorrect number of blogs returned')
})//

//verify the unique id property is named 'id'
test('blog posts have id instead of _id', async () => {
  const response = await api
    .get('/api/blogs')
    .expect(200)
    .expect('Content-Type', /application\/json/)

  const blogs = response.body

  //assert all blogs have id instead _id
  blogs.forEach(blog => {
    assert(blog.id, 'blog does not have an id property')
    assert(!blog._id, 'blog has an _id propery')
  });
})//

//verify that a POST req successfully creates a new blog
test('HTTP POST req to /api/blogs successfully creates a new blog post', async () => {
  const nBlog = {
    title: 'New Blog Test Post',
    author: 'Alice Smith',
    url: 'http://example.com/new-blog',
    likes: 40,
  }

  //POST req
  const postRes = await api
    .post('/api/blogs')
    .send(nBlog)
    .expect(201) // 201 Created
    .expect('Content-Type', /application\/json/)  

  //verify the res content
  const createdBlog = postRes.body
  assert.strictEqual(createdBlog.title, nBlog.title)
  assert.strictEqual(createdBlog.author, nBlog.author)
  assert.strictEqual(createdBlog.url, nBlog.url)
  assert.strictEqual(createdBlog.likes, nBlog.likes)

  //verify total number of blogs
  const allBlogs = await Blog.find({})
  assert.strictEqual(allBlogs.length, initialBlogs.length+1)

  //verify the newly added blog is saved based on title
  const titles = allBlogs.map(blog => blog.title)
  assert(titles.includes(nBlog.title), 'new blog POST not found in db')

})//

//verify if likes propery is missing, it defaults to zero
test('if likes property is missing, it defaults to zero', async () => {
  const nBlog = {
    title: 'Blog Without Likes',
    author: 'Alex Author',
    url: 'http://example.com/testnolikes',
  }

  const postRes = await api
    .post('/api/blogs')
    .send(nBlog)
    .expect(201)
    .expect('Content-Type', /application\/json/)

  const createdBlog = postRes.body

  //assert if likes default to zero
  assert.strictEqual(createdBlog.likes, 0, 'the likes property did not default to zero' )
})//

//test, missing title
test('POST fails w/ 400 if title is missing', async () => {
  const nBlog = {
    author: 'Author No Title',
    url: 'http://example.com/test-no-title',
  }
  const postRes400 = await api
    .post('/api/blogs')
    .send(nBlog)
    .expect(400)
    .expect('Content-Type', /application\/json/)

  //'title and url are required': The expected error message that the backend should return.
  assert.strictEqual(postRes400.body.error, 'title and url are required', 'Incorrect error message')

  const allBlogs = await Blog.find({})
  assert.strictEqual(allBlogs.length, initialBlogs.length, 'the blog added despite missing title')

})//

//cleanup: close database connection
after(async () => {
    await mongoose.connection.close()
})//
**************
4.17
when a new bloh is created ad saved, it needs to be associated with a user by adding the blog's id to the blogs array in the 
corresponding user's doc

user.blogs = user.blogs.concat(savedBlog._id)

user.blogs: Refers to the current array of blog IDs already associated with the user.
savedBlog._id: Refers to the unique ID of the newly created blog (generated by MongoDB when the blog is saved to the database).
concat: This method creates a new array by appending savedBlog._id to the existing user.blogs array. 
Unlike push, it does not modify the original array but instead returns a new one.
Assignment: The user.blogs array is updated with the new array returned by concat.

const blogs = await Blog.find({}).populate('user', { username: 1, name: 1 });

. Blog.find({})
Purpose: Fetches all blog documents from the Blog collection in the MongoDB database.
{}: The empty object passed to find() specifies no filter, so it retrieves all documents in the collection.
Returns: An array of blog documents matching the query (in this case, all blogs).
2. .populate('user', { username: 1, name: 1 })
Purpose of populate: Replaces the user field in each blog document with the corresponding user document referenced in the user field (based on the ObjectId stored there). This enriches the blog data with user details.
Breaking it down:
'user': Specifies the field in the Blog schema to populate. In the schema:


user: {
  type: mongoose.Schema.Types.ObjectId,
  ref: 'User',
}
This indicates that user is a reference to a User document.

Second Argument { username: 1, name: 1 }:

This specifies which fields from the User document should be included in the populated result.
1 means "include this field," so only username and name will be included in the populated user object.
Other fields like _id, passwordHash, or blogs are excluded unless explicitly included.
Example of Populated Data:
Suppose the blog document in the database looks like this:


{
  "title": "A Great Blog",
  "author": "Jane Doe",
  "url": "http://example.com",
  "likes": 10,
  "user": "603c9b8f8f1d3a42d8a98b34" // Reference to a User
}
After populating, it will look like this:


{
  "title": "A Great Blog",
  "author": "Jane Doe",
  "url": "http://example.com",
  "likes": 10,
  "user": {
    "username": "janedoe",
    "name": "Jane Doe"
  }
}
3. await
Purpose: Ensures the query (Blog.find().populate()) is executed and resolves before proceeding.
Without await, the blogs variable would be a Promise instead of the array of blog documents.
4. Final Result
The blogs variable will contain all blog documents, with the user field populated with the username and name of the creator.
Example of blogs:

[
  {
    "title": "A Great Blog",
    "author": "Jane Doe",
    "url": "http://example.com",
    "likes": 10,
    "user": {
      "username": "janedoe",
      "name": "Jane Doe"
    }
  },
  {
    "title": "Another Blog",
    "author": "John Smith",
    "url": "http://example.com/another",
    "likes": 5,
    "user": {
      "username": "johnsmith",
      "name": "John Smith"
    }
  }
]
************************
add, delete blog before userExtractor middleware implementation

// Create a new blog
blogsRouter.post('/', async (request, response) => {  
  const {title, author, url, likes} = request.body  
  
  if(!title || !url) {
    return response.status(400).json({error: 'title and url are required'})
  }

  // Check if token exists
  const decodedToken = jwt.verify(request.token, config.JWT_SECRET);
  if (!request.token || !decodedToken.id) {
    return response.status(401).json({ error: 'Token missing or invalid' });
  }

  // Find the user by ID from the token
  const user = await User.findById(decodedToken.id);
  if (!user) {
    return response.status(404).json({ error: 'User not found' });
  }
  

  const blog = new Blog({
    title,
    author,
    url,
    likes: likes || 0,
    user: user._id, // set the creator of the blog
  });
  const savedBlog = await blog.save();

  //update the user's blogs list
  user.blogs = user.blogs.concat(savedBlog._id)
  await user.save()
  response.status(201).json(savedBlog) //default status code(200 OK) changed w/ 201 resource creation  
})//

// Delete
blogsRouter.delete('/:id', async (request, response) => { 
  // Check if token exists
  const decodedToken = jwt.verify(request.token, config.JWT_SECRET);
  if (!request.token || !decodedToken.id) {
    return response.status(401).json({ error: 'Token missing or invalid' });
  }

  // Fetch the blog to be deleted
  const blog = await Blog.findById(request.params.id);
  if (!blog) {
    return response.status(404).json({ error: 'Blog not found' });
  }

  // Check if the user requesting the delete owns the blog
  if (blog.user.toString() !== decodedToken.id.toString()) {
    return response.status(403).json({ error: 'Permission denied: unauthorized user' });
  }

  await Blog.findByIdAndDelete(request.params.id)
  response.status(204).end() 
})//